/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  STATIC = false; //Nao criara metodos estaticos
  DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(Fun)
package parser;
import java.io.*;

public class Fun
{
  boolean Menosshort = false;
  int contParseError = 0; //Contador de erros sintáticos
  
  public static void main(String args []) throws ParseException
  {
    boolean debug = false;
    
    System.out.println(System.getProperty("user.dir"));
	try {
	    Fun parser = new Fun(new java.io.FileInputStream(args[0]));

	    
    	parser.program();
    	if(parser.token_source.foundLexError() != 0)
    	{
    		System.out.println(parser.token_source.foundLexError() + "Lexical Errors found!");
    	}	
    	System.out.println("Análise finalizada!");
  	} catch (ParseException e) {
  		System.out.println(e);
  	} catch(TokenMgrError e) {
  	  	System.out.println(e);
  	} catch(java.io.FileNotFoundException e) {
  	  	System.out.println(e);
  	}
  }

  static public String im(int x)
  {
   	int k;
   	String s;
   	s = tokenImage[x];
   	k = s.lastIndexOf("\"");
   	try {  s = s.substring(1,k); }
   	catch(StringIndexOutOfBoundsException e)
   	{ }
   	return s;
  }
}

PARSER_END(Fun)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

SKIP :
{
  "/*" : multilinecomment
}
< multilinecomment > SKIP:
{
  "*/" : DEFAULT
|  < ~[] >
}

SKIP:
{
  "//" : singlelinecomment
}
< singlelinecomment > SKIP:
{
  < ["\n","\r"] > : DEFAULT
| < ~[] >
}



/* TRATA OS ERROS LEXICOS */
SPECIAL_TOKEN :
{
	//< INVALID_CHAR: ("'") (((~ ["\n","\r", "'"])*) | ((~ ["\\"]~ ["t","r","n","f","'"](~ ["\n","\r", "'"])*["'"])) | ((["\\"]["t","r","n","f","'"](~ ["\n","\r", "'"])+["'"]))) (["\n","\r"])  >    
	< INVALID_CHAR_NEED_CLOSE_ABSTENT: ("'") (~ ["\n","\r", "'"])* (["\n","\r"])  >    
	{
	  System.err.println("Line "+ input_stream.getEndLine() + " - invalid char need (') to close character: " + image);
	  countLexError++;
 	}
 |
	< INVALID_CHAR_lENGTH_INVALID: ("'")  (((~ ["\\"])(~ ["\n","\r", "'"])) | ((~ ["\n","\r", "'"])(~ ["\n","\r", "'"])(~ ["\n","\r", "'"])+)) ["'"] (["\n","\r"])  >    
	{
	  System.err.println("Line "+ input_stream.getEndLine() + " - invalid char length" + image);
	  countLexError++;
 	}
|
	< INVALID_SPECIAL_CHAR: ("'") (["\\"]) (~["t","r","n","f","'", "\\"])? ["'"] (["\n","\r"])  >    
	{
	  System.err.println("Line "+ input_stream.getEndLine() + " - invalid special char " + image);
	  countLexError++;
 	}
 	
| < INVALID_LEXICAL:
(  ~["a"-"z", "A"-"Z",
  "0"-"9",
  "\"",
  "(",
  ")",
  "[",
  "]",
  "{",
  "}",
  ";",
  ",",
  ".",
  "=",
  ">",
  "<",
  "!",
  "+",
  "-",
  "*",
  "/",
  "%",
  " ",
  "\t",
  "\n",
  "\r",
  "'",
  "\\",
  "\f"])+ >
 {
   System.err.println("Line "+ input_stream.getEndLine() + " - Invalid string found: " + image);
   countLexError++;
 }
| < INVALID_CONST:
	"\"" (~ ["\n","\r","\""])* ["\n","\r"] >
	{
	  System.err.println("Line "+ input_stream.getEndLine() + " - String constant has a \\n: " + image);
	  countLexError++;
 	}	
}
TOKEN : /*Palavras reservadas */
{
  <BREAK:"break">
| <CLASS:"class">
| <CONSTRUCTOR:"constructor">
| <ELSE:"else">
| <EXTENDS:"extends">
| <FOR:"for">
| <IF:"if">
| <INT:"int">
| <NEW:"new">
| <PRINT:"print">
| <READ:"read">
| <RETURN:"return">
| <STRING:"string">
| <SUPER:"super">
| <BOOLEAN:"true"|"false">
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < ASSIGN : "=" >
| < GT : ">" >
| < LT : "<" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : " >=" >
| < NEQ : "!=" >
| < STAR : "*" >
| < SLASH : "/" >
| < REM : "%" >
}

 /* SIMBOLOS ESPECIAIS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| <	LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
}

/* CONSTANTES */
TOKEN : 
{
  < int_constant : (
    				(["0"-"9"] (["0"-"9"])*) |
  					(["0"-"7"] (["0"-"7"])* ["o", "O"]) |
  					(["0"-"9"] (["0"-"7","A"-"F","a"-"f"])*["h", "H"]) |
  					(["0"-"1"] (["0"-"1"])* ["b","B"])
  					) >
| < string_constant:
			"\""( ~["\"","\n","\r"])* "\"" >

| < null_constant: "null" >
}

TOKEN :
{
   < AND : "and">
|  < XOR : "xor">
|  < NOT : "not">
|  < OR : "or">
}


/* IDENTIFICADORES */
TOKEN : 
{
  < IDENT: < LETTER > (< LETTER >|< DIGIT >)* >
| < #LETTER: ["A"-"Z", "a"-"z"] >
| < #DIGIT: ["0"-"9"] >
}

TOKEN :
{
  //< CHAR : ((["'"])(["0"-"9"] | ["a"-"z"] | ["A"-"Z"] | (["\\"]["t","r","n","f"]))(["'"]))>
  < CHAR:
			"'" ( (~["'","\n","\r"])? | (["\\"]["t","r","n","f","'", "\\"]) ) "'" >
}


TOKEN :
{
  < FLOAT :  ([ "0"-"9"])+["."]([ "0"-"9"])+ >
}


TOKEN_MGR_DECLS:
{
	int countLexError = 0;

	public int foundLexError()
	{
		return countLexError;
	}
}

JAVACODE void program()
{
Token t;
    do
    {
    t = getNextToken();
    Token st = t;
        while ( st.specialToken != null)
        st = st.specialToken;
        do {
           if ( !Menosshort )
          System.out.println(st.image + "  " +
                                 im(st.kind) + " " +
                                 st.kind);
           else
              System.out.println("Line: " + st.beginLine +
                                 " Column: " + st.beginColumn +
                                 " " + st.image +
                                 "  " + im(st.kind) + "  "+t.kind);
          st = st.next;
        } while (st != t.next);
    } while (t.kind != FunConstants.EOF);
}