/* Generated By:JavaCC: Do not edit this line. FunConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FunConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INVALID_CHAR_NEED_CLOSE_ABSTENT = 12;
  /** RegularExpression Id. */
  int INVALID_CHAR_lENGTH_INVALID = 13;
  /** RegularExpression Id. */
  int INVALID_SPECIAL_CHAR = 14;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 15;
  /** RegularExpression Id. */
  int INVALID_CONST = 16;
  /** RegularExpression Id. */
  int BREAK = 17;
  /** RegularExpression Id. */
  int CLASS = 18;
  /** RegularExpression Id. */
  int CONSTRUCTOR = 19;
  /** RegularExpression Id. */
  int ELSE = 20;
  /** RegularExpression Id. */
  int EXTENDS = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int IF = 23;
  /** RegularExpression Id. */
  int INT = 24;
  /** RegularExpression Id. */
  int NEW = 25;
  /** RegularExpression Id. */
  int PRINT = 26;
  /** RegularExpression Id. */
  int READ = 27;
  /** RegularExpression Id. */
  int RETURN = 28;
  /** RegularExpression Id. */
  int STRING = 29;
  /** RegularExpression Id. */
  int SUPER = 30;
  /** RegularExpression Id. */
  int BOOLEAN = 31;
  /** RegularExpression Id. */
  int PLUS = 32;
  /** RegularExpression Id. */
  int MINUS = 33;
  /** RegularExpression Id. */
  int ASSIGN = 34;
  /** RegularExpression Id. */
  int GT = 35;
  /** RegularExpression Id. */
  int LT = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int LE = 38;
  /** RegularExpression Id. */
  int GE = 39;
  /** RegularExpression Id. */
  int NEQ = 40;
  /** RegularExpression Id. */
  int STAR = 41;
  /** RegularExpression Id. */
  int SLASH = 42;
  /** RegularExpression Id. */
  int REM = 43;
  /** RegularExpression Id. */
  int LPAREN = 44;
  /** RegularExpression Id. */
  int RPAREN = 45;
  /** RegularExpression Id. */
  int LBRACE = 46;
  /** RegularExpression Id. */
  int RBRACE = 47;
  /** RegularExpression Id. */
  int LBRACKET = 48;
  /** RegularExpression Id. */
  int RBRACKET = 49;
  /** RegularExpression Id. */
  int SEMICOLON = 50;
  /** RegularExpression Id. */
  int COMMA = 51;
  /** RegularExpression Id. */
  int DOT = 52;
  /** RegularExpression Id. */
  int int_constant = 53;
  /** RegularExpression Id. */
  int string_constant = 54;
  /** RegularExpression Id. */
  int null_constant = 55;
  /** RegularExpression Id. */
  int AND = 56;
  /** RegularExpression Id. */
  int XOR = 57;
  /** RegularExpression Id. */
  int NOT = 58;
  /** RegularExpression Id. */
  int OR = 59;
  /** RegularExpression Id. */
  int IDENT = 60;
  /** RegularExpression Id. */
  int LETTER = 61;
  /** RegularExpression Id. */
  int DIGIT = 62;
  /** RegularExpression Id. */
  int CHAR = 63;
  /** RegularExpression Id. */
  int FLOAT = 64;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int multilinecomment = 1;
  /** Lexical state. */
  int singlelinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"//\"",
    "<token of kind 10>",
    "<token of kind 11>",
    "<INVALID_CHAR_NEED_CLOSE_ABSTENT>",
    "<INVALID_CHAR_lENGTH_INVALID>",
    "<INVALID_SPECIAL_CHAR>",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
    "\"break\"",
    "\"class\"",
    "\"constructor\"",
    "\"else\"",
    "\"extends\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"new\"",
    "\"print\"",
    "\"read\"",
    "\"return\"",
    "\"string\"",
    "\"super\"",
    "<BOOLEAN>",
    "\"+\"",
    "\"-\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"<=\"",
    "\" >=\"",
    "\"!=\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<int_constant>",
    "<string_constant>",
    "\"null\"",
    "\"and\"",
    "\"xor\"",
    "\"not\"",
    "\"or\"",
    "<IDENT>",
    "<LETTER>",
    "<DIGIT>",
    "<CHAR>",
    "<FLOAT>",
  };

}
